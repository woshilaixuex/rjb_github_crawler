// Package document_ai code generated by oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package larkdocument_ai

import (
	"context"
	"net/http"

	"github.com/larksuite/oapi-sdk-go/v3/core"
)

func NewService(config *larkcore.Config) *DocumentAiService {
	d := &DocumentAiService{config: config}
	d.BankCard = &bankCard{service: d}
	d.BusinessCard = &businessCard{service: d}
	d.BusinessLicense = &businessLicense{service: d}
	d.ChinesePassport = &chinesePassport{service: d}
	d.Contract = &contract{service: d}
	d.DrivingLicense = &drivingLicense{service: d}
	d.FoodManageLicense = &foodManageLicense{service: d}
	d.FoodProduceLicense = &foodProduceLicense{service: d}
	d.HkmMainlandTravelPermit = &hkmMainlandTravelPermit{service: d}
	d.IdCard = &idCard{service: d}
	d.TaxiInvoice = &taxiInvoice{service: d}
	d.TrainInvoice = &trainInvoice{service: d}
	d.TwMainlandTravelPermit = &twMainlandTravelPermit{service: d}
	d.VatInvoice = &vatInvoice{service: d}
	d.VehicleLicense = &vehicleLicense{service: d}
	return d
}

type DocumentAiService struct {
	config                  *larkcore.Config
	BankCard                *bankCard                // bank_card
	BusinessCard            *businessCard            // business_card
	BusinessLicense         *businessLicense         // business_license
	ChinesePassport         *chinesePassport         // chinese_passport
	Contract                *contract                // contract
	DrivingLicense          *drivingLicense          // driving_license
	FoodManageLicense       *foodManageLicense       // food_manage_license
	FoodProduceLicense      *foodProduceLicense      // food_produce_license
	HkmMainlandTravelPermit *hkmMainlandTravelPermit // hkm_mainland_travel_permit
	IdCard                  *idCard                  // id_card
	TaxiInvoice             *taxiInvoice             // taxi_invoice
	TrainInvoice            *trainInvoice            // train_invoice
	TwMainlandTravelPermit  *twMainlandTravelPermit  // tw_mainland_travel_permit
	VatInvoice              *vatInvoice              // vat_invoice
	VehicleLicense          *vehicleLicense          // vehicle_license
}

type bankCard struct {
	service *DocumentAiService
}
type businessCard struct {
	service *DocumentAiService
}
type businessLicense struct {
	service *DocumentAiService
}
type chinesePassport struct {
	service *DocumentAiService
}
type contract struct {
	service *DocumentAiService
}
type drivingLicense struct {
	service *DocumentAiService
}
type foodManageLicense struct {
	service *DocumentAiService
}
type foodProduceLicense struct {
	service *DocumentAiService
}
type hkmMainlandTravelPermit struct {
	service *DocumentAiService
}
type idCard struct {
	service *DocumentAiService
}
type taxiInvoice struct {
	service *DocumentAiService
}
type trainInvoice struct {
	service *DocumentAiService
}
type twMainlandTravelPermit struct {
	service *DocumentAiService
}
type vatInvoice struct {
	service *DocumentAiService
}
type vehicleLicense struct {
	service *DocumentAiService
}

//
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=recognize&project=document_ai&resource=bank_card&version=v1
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/document_aiv1/recognize_bankCard.go
func (b *bankCard) Recognize(ctx context.Context, req *RecognizeBankCardReq, options ...larkcore.RequestOptionFunc) (*RecognizeBankCardResp, error) {
	options = append(options, larkcore.WithFileUpload())
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/document_ai/v1/bank_card/recognize"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, b.service.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &RecognizeBankCardResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, b.service.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

//
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=recognize&project=document_ai&resource=business_card&version=v1
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/document_aiv1/recognize_businessCard.go
func (b *businessCard) Recognize(ctx context.Context, req *RecognizeBusinessCardReq, options ...larkcore.RequestOptionFunc) (*RecognizeBusinessCardResp, error) {
	options = append(options, larkcore.WithFileUpload())
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/document_ai/v1/business_card/recognize"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, b.service.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &RecognizeBusinessCardResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, b.service.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

//
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=recognize&project=document_ai&resource=business_license&version=v1
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/document_aiv1/recognize_businessLicense.go
func (b *businessLicense) Recognize(ctx context.Context, req *RecognizeBusinessLicenseReq, options ...larkcore.RequestOptionFunc) (*RecognizeBusinessLicenseResp, error) {
	options = append(options, larkcore.WithFileUpload())
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/document_ai/v1/business_license/recognize"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, b.service.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &RecognizeBusinessLicenseResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, b.service.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

//
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=recognize&project=document_ai&resource=chinese_passport&version=v1
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/document_aiv1/recognize_chinesePassport.go
func (c *chinesePassport) Recognize(ctx context.Context, req *RecognizeChinesePassportReq, options ...larkcore.RequestOptionFunc) (*RecognizeChinesePassportResp, error) {
	options = append(options, larkcore.WithFileUpload())
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/document_ai/v1/chinese_passport/recognize"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, c.service.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &RecognizeChinesePassportResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, c.service.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

//
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=field_extraction&project=document_ai&resource=contract&version=v1
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/document_aiv1/fieldExtraction_contract.go
func (c *contract) FieldExtraction(ctx context.Context, req *FieldExtractionContractReq, options ...larkcore.RequestOptionFunc) (*FieldExtractionContractResp, error) {
	options = append(options, larkcore.WithFileUpload())
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/document_ai/v1/contract/field_extraction"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, c.service.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &FieldExtractionContractResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, c.service.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

//
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=recognize&project=document_ai&resource=driving_license&version=v1
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/document_aiv1/recognize_drivingLicense.go
func (d *drivingLicense) Recognize(ctx context.Context, req *RecognizeDrivingLicenseReq, options ...larkcore.RequestOptionFunc) (*RecognizeDrivingLicenseResp, error) {
	options = append(options, larkcore.WithFileUpload())
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/document_ai/v1/driving_license/recognize"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, d.service.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &RecognizeDrivingLicenseResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, d.service.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

//
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=recognize&project=document_ai&resource=food_manage_license&version=v1
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/document_aiv1/recognize_foodManageLicense.go
func (f *foodManageLicense) Recognize(ctx context.Context, req *RecognizeFoodManageLicenseReq, options ...larkcore.RequestOptionFunc) (*RecognizeFoodManageLicenseResp, error) {
	options = append(options, larkcore.WithFileUpload())
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/document_ai/v1/food_manage_license/recognize"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, f.service.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &RecognizeFoodManageLicenseResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, f.service.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

//
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=recognize&project=document_ai&resource=food_produce_license&version=v1
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/document_aiv1/recognize_foodProduceLicense.go
func (f *foodProduceLicense) Recognize(ctx context.Context, req *RecognizeFoodProduceLicenseReq, options ...larkcore.RequestOptionFunc) (*RecognizeFoodProduceLicenseResp, error) {
	options = append(options, larkcore.WithFileUpload())
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/document_ai/v1/food_produce_license/recognize"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, f.service.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &RecognizeFoodProduceLicenseResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, f.service.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

//
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=recognize&project=document_ai&resource=hkm_mainland_travel_permit&version=v1
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/document_aiv1/recognize_hkmMainlandTravelPermit.go
func (h *hkmMainlandTravelPermit) Recognize(ctx context.Context, req *RecognizeHkmMainlandTravelPermitReq, options ...larkcore.RequestOptionFunc) (*RecognizeHkmMainlandTravelPermitResp, error) {
	options = append(options, larkcore.WithFileUpload())
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/document_ai/v1/hkm_mainland_travel_permit/recognize"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, h.service.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &RecognizeHkmMainlandTravelPermitResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, h.service.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

//
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=recognize&project=document_ai&resource=id_card&version=v1
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/document_aiv1/recognize_idCard.go
func (i *idCard) Recognize(ctx context.Context, req *RecognizeIdCardReq, options ...larkcore.RequestOptionFunc) (*RecognizeIdCardResp, error) {
	options = append(options, larkcore.WithFileUpload())
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/document_ai/v1/id_card/recognize"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, i.service.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &RecognizeIdCardResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, i.service.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

//
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=recognize&project=document_ai&resource=taxi_invoice&version=v1
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/document_aiv1/recognize_taxiInvoice.go
func (t *taxiInvoice) Recognize(ctx context.Context, req *RecognizeTaxiInvoiceReq, options ...larkcore.RequestOptionFunc) (*RecognizeTaxiInvoiceResp, error) {
	options = append(options, larkcore.WithFileUpload())
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/document_ai/v1/taxi_invoice/recognize"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, t.service.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &RecognizeTaxiInvoiceResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, t.service.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

//
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=recognize&project=document_ai&resource=train_invoice&version=v1
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/document_aiv1/recognize_trainInvoice.go
func (t *trainInvoice) Recognize(ctx context.Context, req *RecognizeTrainInvoiceReq, options ...larkcore.RequestOptionFunc) (*RecognizeTrainInvoiceResp, error) {
	options = append(options, larkcore.WithFileUpload())
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/document_ai/v1/train_invoice/recognize"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, t.service.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &RecognizeTrainInvoiceResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, t.service.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

//
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=recognize&project=document_ai&resource=tw_mainland_travel_permit&version=v1
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/document_aiv1/recognize_twMainlandTravelPermit.go
func (t *twMainlandTravelPermit) Recognize(ctx context.Context, req *RecognizeTwMainlandTravelPermitReq, options ...larkcore.RequestOptionFunc) (*RecognizeTwMainlandTravelPermitResp, error) {
	options = append(options, larkcore.WithFileUpload())
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/document_ai/v1/tw_mainland_travel_permit/recognize"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, t.service.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &RecognizeTwMainlandTravelPermitResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, t.service.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

//
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=recognize&project=document_ai&resource=vat_invoice&version=v1
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/document_aiv1/recognize_vatInvoice.go
func (v *vatInvoice) Recognize(ctx context.Context, req *RecognizeVatInvoiceReq, options ...larkcore.RequestOptionFunc) (*RecognizeVatInvoiceResp, error) {
	options = append(options, larkcore.WithFileUpload())
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/document_ai/v1/vat_invoice/recognize"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, v.service.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &RecognizeVatInvoiceResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, v.service.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}

//
//
// -
//
// - 官网API文档链接:https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=recognize&project=document_ai&resource=vehicle_license&version=v1
//
// - 使用Demo链接:https://github.com/larksuite/oapi-sdk-go/tree/v3_main/sample/apiall/document_aiv1/recognize_vehicleLicense.go
func (v *vehicleLicense) Recognize(ctx context.Context, req *RecognizeVehicleLicenseReq, options ...larkcore.RequestOptionFunc) (*RecognizeVehicleLicenseResp, error) {
	options = append(options, larkcore.WithFileUpload())
	// 发起请求
	apiReq := req.apiReq
	apiReq.ApiPath = "/open-apis/document_ai/v1/vehicle_license/recognize"
	apiReq.HttpMethod = http.MethodPost
	apiReq.SupportedAccessTokenTypes = []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}
	apiResp, err := larkcore.Request(ctx, apiReq, v.service.config, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &RecognizeVehicleLicenseResp{ApiResp: apiResp}
	err = apiResp.JSONUnmarshalBody(resp, v.service.config)
	if err != nil {
		return nil, err
	}
	return resp, err
}
